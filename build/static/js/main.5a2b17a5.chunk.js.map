{"version":3,"sources":["Components/contact.js","App.js","serviceWorker.js","index.js"],"names":["Contact","state","name","email","message","changeHandler","e","setState","target","value","submitHandler","preventDefault","this","className","action","htmlFor","type","placeholder","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAuEeA,E,2MAlEXC,MAAM,CACFC,KAAM,GACNC,MAAO,GACPC,QAAS,I,EAGbC,cAAe,SAAAC,GACX,EAAKC,SAAL,eACKD,EAAEE,OAAON,KAAOI,EAAEE,OAAOC,S,EAGlCC,cAAgB,SAACJ,GACbA,EAAEK,iBACF,EAAKJ,SAAS,CACVL,KAAM,GACNC,MAAO,GACPC,QAAS,M,wEAKR,IAAD,EAC0BQ,KAAKX,MAA5BC,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,QAGpB,OACI,yBAAKS,UAAU,qBACX,0BAAMC,OAAO,GAAGD,UAAU,gBACtB,2BAAOE,QAAQ,GAAGF,UAAU,uBAA5B,4BAGA,2BACAX,KAAK,OACLc,KAAK,OACLC,YAAY,OACZJ,UAAU,2BACVJ,MAAOP,EACPgB,SAAWN,KAAKP,gBAChB,2BAAOU,QAAQ,GAAGF,UAAU,uBAA5B,iBACA,2BACAX,KAAK,QACLc,KAAK,QACLC,YAAY,QACZJ,UAAU,4BACVJ,MAAON,EACPe,SAAWN,KAAKP,gBAChB,2BAAOU,QAAQ,GAAGF,UAAU,uBAA5B,oBACA,8BACAX,KAAK,UACLW,UAAU,wBACVJ,MAAOL,EACPc,SAAWN,KAAKP,gBAEhB,2BAAOW,KAAK,SAASP,MAAM,SAASI,UAAU,uBAAuBM,QAASP,KAAKF,gBACnF,2BAAOM,KAAK,SAASd,KAAK,YAAYO,MAAM,kB,GAxD1CW,aCWPC,MATf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.5a2b17a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Contact extends Component {\r\n\r\n    state={\r\n        name: '',\r\n        email: '',\r\n        message: '',\r\n    }\r\n\r\n    changeHandler= e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }\r\n    submitHandler = (e)=> {\r\n        e.preventDefault()\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            message: '',\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        const {name, email, message}= this.state;\r\n\r\n\r\n        return(\r\n            <div className=\"contact-container\">\r\n                <form action=\"\" className=\"contact-form\">\r\n                    <label htmlFor=\"\" className=\"contact-form__label\">\r\n                        Please provide your Name \r\n                    </label>\r\n                    <input \r\n                    name=\"name\" \r\n                    type=\"text\" \r\n                    placeholder=\"Name\" \r\n                    className=\"contact-form__name input\"\r\n                    value={name}\r\n                    onChange= {this.changeHandler}/>\r\n                    <label htmlFor=\"\" className=\"contact-form__label\">Email Address</label>\r\n                    <input  \r\n                    name=\"email\" \r\n                    type=\"email\"  \r\n                    placeholder=\"Email\" \r\n                    className=\"contact-form__email input\"\r\n                    value={email}\r\n                    onChange= {this.changeHandler}/>\r\n                    <label htmlFor=\"\" className=\"contact-form__label\">Leave Us a Note </label>\r\n                    <textarea \r\n                    name=\"message\" \r\n                    className=\"contact-form__message\"\r\n                    value={message}\r\n                    onChange= {this.changeHandler}\r\n                    />\r\n                    <input type=\"submit\" value=\"Submit\" className=\"contact-form__submit\" onClick={this.submitHandler}/>\r\n                    <input type=\"hidden\" name=\"form-name\" value=\"contact\"/>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Contact;","import React from 'react';\nimport Contact from './Components/contact';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Contact/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}